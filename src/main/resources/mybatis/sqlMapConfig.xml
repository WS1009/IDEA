<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<!--*****  此配置文件仅用于Mybatis测试,SpringMVC没有用到  *****-->

<configuration>
    <!-- 和spring整合后 environments配置将废除
     properties元素体内定义的属性首先被读取，然后读取properties元素中resource或url加载的属性，它会覆盖已读取的同名属性
     最后读取parameterType传递的属性，它会覆盖已读取的同名属性。
     建议：
        不要在properties元素体内添加任何属性值，只将属性值定义在properties文件中。
        在properties文件中定义属性名要有一定的特殊性，如xxx.xxx.xxx
     -->
    <properties resource="db.properties">
        <!-- 在 property中还可以配置一些属性名和属性值-->
        <!-- <property name="" value=""/> -->
    </properties>



    <!-- 全局的配置参数 -->
    <!-- <settings></settings>-->
    <settings>
        <!-- 打开延迟加载的开关 -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 将积极加载改为消极加载，按需加载 -->
        <setting name="aggressiveLazyLoading" value="false"/>

        <!-- 开启二级缓存 -->
        <setting name="cacheEnabled" value="true"/>
    </settings>



    <typeAliases>
        <!-- 单个别名定义
            针对单个别名定义
            type:表示类型的路径
            alias：别名
         -->
        <!-- <typeAlias alias="user" type="cn.itcast.mybatis.po.User"/> -->

        <!-- 批量别名的定义
            name:指定包名，mybatis会自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或者小写都可以）
        -->
        <package name="cn.nuaa.po"/>
    </typeAliases>



    <!--类型处理器，mybatis中通过typeHandlers完成映射文件中jdbc类型和java类型的转换。通常情况下，mybaits提供的类型处理器沐足日常需要，不需要自定义-->
    <!--<typeHandlers> </typeHandlers>-->

    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC" />
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}" />
                <property name="url" value="${jdbc.url}" />
                <property name="username" value="${jdbc.username}" />
                <property name="password" value="${jdbc.password}" />
            </dataSource>
        </environment>
    </environments>




    <!-- 加载映射文件 -->
    <mappers>
        <!--使用相对于类路径的资源-->
        <!-- <mapper resource="mapper/UserMapper.xml" /> -->

        <mapper resource="test/User.xml" />
        <mapper resource="test/UserMapper.xml" />
        <mapper resource="test/OrdersMapperCustom.xml" />

        <!-- 使用mapper接口类路径，通过mapper接口加载单个映射文件
            遵循的规范：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中
            使用的前提是使用mapper代理的方法
         -->
        <!-- <mapper class="cn.nuaa.mapper.UserMapper"/> -->


        <!-- 批量加载推荐使用注册指定包下的所有mapper接口
            此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中
         -->
        <!--<package name="cn.nuaa.testmapper"/>-->
    </mappers>

</configuration>
